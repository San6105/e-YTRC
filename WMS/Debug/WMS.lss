
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e32  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800200  00800200  00000ea6  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00001618  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eed  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029d  00000000  00000000  000035a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000988  00000000  00000000  00003842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f7  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017f5  00000000  00000000  000046a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  68:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  6c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  70:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  7c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  80:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  84:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  8c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  90:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  94:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  98:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  9c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  ac:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  bc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  cc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  dc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  e0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  e4:	11 03       	mulsu	r17, r17
  e6:	1d 03       	fmul	r17, r21
  e8:	29 03       	fmul	r18, r17
  ea:	60 03       	mulsu	r22, r16
  ec:	97 03       	fmuls	r17, r23
  ee:	ae 03       	fmulsu	r18, r22
  f0:	cf 03       	fmulsu	r20, r23
  f2:	2e 04       	cpc	r2, r14
  f4:	8d 04       	cpc	r8, r13
  f6:	ec 04       	cpc	r14, r12
  f8:	0e 05       	cpc	r16, r14
  fa:	30 05       	cpc	r19, r0
  fc:	67 05       	cpc	r22, r7
  fe:	9e 05       	cpc	r25, r14
 100:	b5 05       	cpc	r27, r5
 102:	cc 05       	cpc	r28, r12
 104:	04 06       	cpc	r0, r20
 106:	5b 06       	cpc	r5, r27
 108:	a9 06       	cpc	r10, r25
 10a:	b5 06       	cpc	r11, r21

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	d1 e2       	ldi	r29, 0x21	; 33
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	0c bf       	out	0x3c, r16	; 60

0000011c <__do_copy_data>:
 11c:	12 e0       	ldi	r17, 0x02	; 2
 11e:	a0 e0       	ldi	r26, 0x00	; 0
 120:	b2 e0       	ldi	r27, 0x02	; 2
 122:	e2 e3       	ldi	r30, 0x32	; 50
 124:	fe e0       	ldi	r31, 0x0E	; 14
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	0b bf       	out	0x3b, r16	; 59
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x14>
 12c:	07 90       	elpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a0 30       	cpi	r26, 0x00	; 0
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0x10>

00000136 <__do_clear_bss>:
 136:	12 e0       	ldi	r17, 0x02	; 2
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	b2 e0       	ldi	r27, 0x02	; 2
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	ab 31       	cpi	r26, 0x1B	; 27
 142:	b1 07       	cpc	r27, r17
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 c0 02 	call	0x580	; 0x580 <main>
 14a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	86 e6       	ldi	r24, 0x66	; 102
 154:	9e e0       	ldi	r25, 0x0E	; 14
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_set_4bit+0x4>
 15a:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 15e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 164:	42 9a       	sbi	0x08, 2	; 8
 166:	ef ef       	ldi	r30, 0xFF	; 255
 168:	f7 e4       	ldi	r31, 0x47	; 71
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_set_4bit+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_set_4bit+0x1e>
 170:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 172:	42 98       	cbi	0x08, 2	; 8
 174:	e6 e6       	ldi	r30, 0x66	; 102
 176:	fe e0       	ldi	r31, 0x0E	; 14
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_set_4bit+0x26>
 17c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 180:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 182:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 184:	42 9a       	sbi	0x08, 2	; 8
 186:	ef ef       	ldi	r30, 0xFF	; 255
 188:	f7 e4       	ldi	r31, 0x47	; 71
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_set_4bit+0x38>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_set_4bit+0x3e>
 190:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 192:	42 98       	cbi	0x08, 2	; 8
 194:	e6 e6       	ldi	r30, 0x66	; 102
 196:	fe e0       	ldi	r31, 0x0E	; 14
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_set_4bit+0x46>
 19c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 1a2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1a4:	42 9a       	sbi	0x08, 2	; 8
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	97 e4       	ldi	r25, 0x47	; 71
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_set_4bit+0x58>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_set_4bit+0x5e>
 1b0:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b2:	42 98       	cbi	0x08, 2	; 8
 1b4:	e6 e6       	ldi	r30, 0x66	; 102
 1b6:	fe e0       	ldi	r31, 0x0E	; 14
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x66>
 1bc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1be:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1c0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1c6:	42 9a       	sbi	0x08, 2	; 8
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	97 e4       	ldi	r25, 0x47	; 71
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_set_4bit+0x7a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_set_4bit+0x80>
 1d2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1d4:	42 98       	cbi	0x08, 2	; 8
}
 1d6:	08 95       	ret

000001d8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1de:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1e0:	28 2f       	mov	r18, r24
 1e2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1e4:	92 2b       	or	r25, r18
 1e6:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ea:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1ec:	42 9a       	sbi	0x08, 2	; 8
 1ee:	ef ef       	ldi	r30, 0xFF	; 255
 1f0:	f7 e4       	ldi	r31, 0x47	; 71
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_wr_command+0x1a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_wr_command+0x20>
 1f8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1fa:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1fc:	98 b1       	in	r25, 0x08	; 8
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 202:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 204:	82 95       	swap	r24
 206:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 208:	89 2b       	or	r24, r25
 20a:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 20c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 20e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 210:	42 9a       	sbi	0x08, 2	; 8
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	97 e4       	ldi	r25, 0x47	; 71
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_wr_command+0x3e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_wr_command+0x44>
 21c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 21e:	42 98       	cbi	0x08, 2	; 8
}
 220:	08 95       	ret

00000222 <lcd_init>:
 222:	86 e6       	ldi	r24, 0x66	; 102
 224:	9e e0       	ldi	r25, 0x0E	; 14
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_init+0x4>
 22a:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 22c:	88 e2       	ldi	r24, 0x28	; 40
 22e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
}
 24a:	08 95       	ret

0000024c <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 252:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 254:	28 2f       	mov	r18, r24
 256:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 258:	92 2b       	or	r25, r18
 25a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	ef ef       	ldi	r30, 0xFF	; 255
 264:	f7 e4       	ldi	r31, 0x47	; 71
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x1a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x20>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 270:	98 b1       	in	r25, 0x08	; 8
 272:	9f 70       	andi	r25, 0x0F	; 15
 274:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 276:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 278:	82 95       	swap	r24
 27a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 27c:	89 2b       	or	r24, r25
 27e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 280:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 282:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 284:	42 9a       	sbi	0x08, 2	; 8
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	97 e4       	ldi	r25, 0x47	; 71
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_wr_char+0x3e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_wr_char+0x44>
 290:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 292:	42 98       	cbi	0x08, 2	; 8
}
 294:	08 95       	ret

00000296 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
}
 29c:	08 95       	ret

0000029e <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2a4:	88 81       	ld	r24, Y
 2a6:	88 23       	and	r24, r24
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 2aa:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 2ac:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 2b0:	89 91       	ld	r24, Y+
 2b2:	88 23       	and	r24, r24
 2b4:	d9 f7       	brne	.-10     	; 0x2ac <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	79 f0       	breq	.+30     	; 0x2de <lcd_cursor+0x22>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	18 f4       	brcc	.+6      	; 0x2ca <lcd_cursor+0xe>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	c9 f4       	brne	.+50     	; 0x2fa <lcd_cursor+0x3e>
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <lcd_cursor+0x18>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	69 f0       	breq	.+26     	; 0x2e8 <lcd_cursor+0x2c>
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	a1 f4       	brne	.+40     	; 0x2fa <lcd_cursor+0x3e>
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2d4:	86 2f       	mov	r24, r22
 2d6:	81 58       	subi	r24, 0x81	; 129
 2d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
 2dc:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2de:	86 2f       	mov	r24, r22
 2e0:	81 54       	subi	r24, 0x41	; 65
 2e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
 2e6:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2e8:	86 2f       	mov	r24, r22
 2ea:	8d 56       	subi	r24, 0x6D	; 109
 2ec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
 2f0:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2f2:	86 2f       	mov	r24, r22
 2f4:	8d 52       	subi	r24, 0x2D	; 45
 2f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_wr_command>
 2fa:	08 95       	ret

000002fc <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	8a 01       	movw	r16, r20
 306:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 308:	88 23       	and	r24, r24
 30a:	11 f0       	breq	.+4      	; 0x310 <lcd_print+0x14>
 30c:	66 23       	and	r22, r22
 30e:	19 f4       	brne	.+6      	; 0x316 <lcd_print+0x1a>
	{
		lcd_home();
 310:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_home>
 314:	02 c0       	rjmp	.+4      	; 0x31a <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 316:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor>
	}
	if(digits==5 || flag==1)
 31a:	c5 30       	cpi	r28, 0x05	; 5
 31c:	d1 05       	cpc	r29, r1
 31e:	71 f4       	brne	.+28     	; 0x33c <lcd_print+0x40>
	{
		million=value/10000+48;
 320:	c8 01       	movw	r24, r16
 322:	60 e1       	ldi	r22, 0x10	; 16
 324:	77 e2       	ldi	r23, 0x27	; 39
 326:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 32a:	cb 01       	movw	r24, r22
 32c:	c0 96       	adiw	r24, 0x30	; 48
 32e:	90 93 0b 02 	sts	0x020B, r25
 332:	80 93 0a 02 	sts	0x020A, r24
		lcd_wr_char(million);
 336:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
 33a:	03 c0       	rjmp	.+6      	; 0x342 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 33c:	c4 30       	cpi	r28, 0x04	; 4
 33e:	d1 05       	cpc	r29, r1
 340:	b9 f4       	brne	.+46     	; 0x370 <lcd_print+0x74>
	{
		temp = value/1000;
 342:	c8 01       	movw	r24, r16
 344:	68 ee       	ldi	r22, 0xE8	; 232
 346:	73 e0       	ldi	r23, 0x03	; 3
 348:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 34c:	cb 01       	movw	r24, r22
 34e:	70 93 0d 02 	sts	0x020D, r23
 352:	60 93 0c 02 	sts	0x020C, r22
		thousand = temp%10 + 48;
 356:	6a e0       	ldi	r22, 0x0A	; 10
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 35e:	c0 96       	adiw	r24, 0x30	; 48
 360:	90 93 18 02 	sts	0x0218, r25
 364:	80 93 17 02 	sts	0x0217, r24
		lcd_wr_char(thousand);
 368:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
		flag=1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	01 c0       	rjmp	.+2      	; 0x372 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 370:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 372:	c3 30       	cpi	r28, 0x03	; 3
 374:	d1 05       	cpc	r29, r1
 376:	11 f0       	breq	.+4      	; 0x37c <lcd_print+0x80>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	b1 f4       	brne	.+44     	; 0x3a8 <lcd_print+0xac>
	{
		temp = value/100;
 37c:	c8 01       	movw	r24, r16
 37e:	64 e6       	ldi	r22, 0x64	; 100
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 386:	cb 01       	movw	r24, r22
 388:	70 93 0d 02 	sts	0x020D, r23
 38c:	60 93 0c 02 	sts	0x020C, r22
		hundred = temp%10 + 48;
 390:	6a e0       	ldi	r22, 0x0A	; 10
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 398:	c0 96       	adiw	r24, 0x30	; 48
 39a:	90 93 14 02 	sts	0x0214, r25
 39e:	80 93 13 02 	sts	0x0213, r24
		lcd_wr_char(hundred);
 3a2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
		flag=1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 3a8:	c2 30       	cpi	r28, 0x02	; 2
 3aa:	d1 05       	cpc	r29, r1
 3ac:	11 f0       	breq	.+4      	; 0x3b2 <lcd_print+0xb6>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	b1 f4       	brne	.+44     	; 0x3de <lcd_print+0xe2>
	{
		temp = value/10;
 3b2:	2a e0       	ldi	r18, 0x0A	; 10
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	c8 01       	movw	r24, r16
 3b8:	b9 01       	movw	r22, r18
 3ba:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 3be:	cb 01       	movw	r24, r22
 3c0:	70 93 0d 02 	sts	0x020D, r23
 3c4:	60 93 0c 02 	sts	0x020C, r22
		tens = temp%10 + 48;
 3c8:	b9 01       	movw	r22, r18
 3ca:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 12 02 	sts	0x0212, r25
 3d4:	80 93 11 02 	sts	0x0211, r24
		lcd_wr_char(tens);
 3d8:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
		flag=1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3de:	c1 30       	cpi	r28, 0x01	; 1
 3e0:	d1 05       	cpc	r29, r1
 3e2:	11 f0       	breq	.+4      	; 0x3e8 <lcd_print+0xec>
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	61 f4       	brne	.+24     	; 0x400 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3e8:	c8 01       	movw	r24, r16
 3ea:	6a e0       	ldi	r22, 0x0A	; 10
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 03 07 	call	0xe06	; 0xe06 <__udivmodhi4>
 3f2:	c0 96       	adiw	r24, 0x30	; 48
 3f4:	90 93 16 02 	sts	0x0216, r25
 3f8:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(unit);
 3fc:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
	}
	if(digits>5)
 400:	c6 30       	cpi	r28, 0x06	; 6
 402:	d1 05       	cpc	r29, r1
 404:	1c f0       	brlt	.+6      	; 0x40c <lcd_print+0x110>
	{
		lcd_wr_char('E');
 406:	85 e4       	ldi	r24, 0x45	; 69
 408:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_wr_char>
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <lcd_port_config>:
unsigned char HU_buzzer_count = 0;
unsigned char RC_buzzer_count = 0;
unsigned int value;

void lcd_port_config(void) {
	DDRC = DDRC | 0xF7;
 416:	87 b1       	in	r24, 0x07	; 7
 418:	87 6f       	ori	r24, 0xF7	; 247
 41a:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80;
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	80 78       	andi	r24, 0x80	; 128
 420:	88 b9       	out	0x08, r24	; 8
}
 422:	08 95       	ret

00000424 <adc_pin_config>:

void adc_pin_config(void) {
	DDRF = 0x00;
 424:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
 426:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
 428:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
 42c:	10 92 08 01 	sts	0x0108, r1
}
 430:	08 95       	ret

00000432 <motion_pin_config>:

void motion_pin_config(void) {
	DDRA = DDRA | 0x0F;
 432:	81 b1       	in	r24, 0x01	; 1
 434:	8f 60       	ori	r24, 0x0F	; 15
 436:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 438:	82 b1       	in	r24, 0x02	; 2
 43a:	80 7f       	andi	r24, 0xF0	; 240
 43c:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   
 43e:	ea e0       	ldi	r30, 0x0A	; 10
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	80 81       	ld	r24, Z
 444:	88 61       	ori	r24, 0x18	; 24
 446:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; 
 448:	eb e0       	ldi	r30, 0x0B	; 11
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	80 81       	ld	r24, Z
 44e:	88 61       	ori	r24, 0x18	; 24
 450:	80 83       	st	Z, r24
}
 452:	08 95       	ret

00000454 <port_init>:

void port_init() {
	lcd_port_config();
 454:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_port_config>
	adc_pin_config();
 458:	0e 94 12 02 	call	0x424	; 0x424 <adc_pin_config>
	motion_pin_config();
 45c:	0e 94 19 02 	call	0x432	; 0x432 <motion_pin_config>
}
 460:	08 95       	ret

00000462 <timer5_init>:

void timer5_init() {
	TCCR5B = 0x00; 
 462:	e1 e2       	ldi	r30, 0x21	; 33
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	10 82       	st	Z, r1
	TCNT5H = 0xFF; 
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01; 
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00; 
 474:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF; 
 478:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00; 
 47c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF; 
 480:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00; 
 484:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF; 
 488:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9; 
 48c:	89 ea       	ldi	r24, 0xA9	; 169
 48e:	80 93 20 01 	sts	0x0120, r24
    TCCR5B = 0x0B; 
 492:	8b e0       	ldi	r24, 0x0B	; 11
 494:	80 83       	st	Z, r24
}
 496:	08 95       	ret

00000498 <adc_init>:

void adc_init() {
    ADCSRA = 0x00;
 498:	ea e7       	ldi	r30, 0x7A	; 122
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	10 82       	st	Z, r1
    ADCSRB = 0x00; 
 49e:	10 92 7b 00 	sts	0x007B, r1
    ADMUX = 0x20;  
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	80 93 7c 00 	sts	0x007C, r24
    ACSR = 0x80;
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	80 bf       	out	0x30, r24	; 48
    ADCSRA = 0x86; 
 4ac:	86 e8       	ldi	r24, 0x86	; 134
 4ae:	80 83       	st	Z, r24
}
 4b0:	08 95       	ret

000004b2 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch) {
    unsigned char a;
    if (Ch > 7) {
 4b2:	88 30       	cpi	r24, 0x08	; 8
 4b4:	18 f0       	brcs	.+6      	; 0x4bc <ADC_Conversion+0xa>
        ADCSRB = 0x08;
 4b6:	98 e0       	ldi	r25, 0x08	; 8
 4b8:	90 93 7b 00 	sts	0x007B, r25
    }
    Ch = Ch & 0x07;  
 4bc:	87 70       	andi	r24, 0x07	; 7
    ADMUX = 0x20 | Ch;  
 4be:	80 62       	ori	r24, 0x20	; 32
 4c0:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = ADCSRA | 0x40; 
 4c4:	ea e7       	ldi	r30, 0x7A	; 122
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	80 64       	ori	r24, 0x40	; 64
 4cc:	80 83       	st	Z, r24
    while ((ADCSRA & 0x10) == 0); 
 4ce:	80 81       	ld	r24, Z
 4d0:	84 ff       	sbrs	r24, 4
 4d2:	fd cf       	rjmp	.-6      	; 0x4ce <ADC_Conversion+0x1c>
    a = ADCH;
 4d4:	80 91 79 00 	lds	r24, 0x0079
    ADCSRA = ADCSRA | 0x10; 
 4d8:	ea e7       	ldi	r30, 0x7A	; 122
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	90 81       	ld	r25, Z
 4de:	90 61       	ori	r25, 0x10	; 16
 4e0:	90 83       	st	Z, r25
    ADCSRB = 0x00;
 4e2:	10 92 7b 00 	sts	0x007B, r1
    return a;
}
 4e6:	08 95       	ret

000004e8 <print_sensor>:

void print_sensor(char row, char column, unsigned char channel) {
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	d8 2f       	mov	r29, r24
 4ee:	c6 2f       	mov	r28, r22
 4f0:	84 2f       	mov	r24, r20
    ADC_Value = ADC_Conversion(channel);
 4f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 4f6:	48 2f       	mov	r20, r24
 4f8:	80 93 0e 02 	sts	0x020E, r24
    lcd_print(row, column, ADC_Value, 3);
 4fc:	8d 2f       	mov	r24, r29
 4fe:	6c 2f       	mov	r22, r28
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	23 e0       	ldi	r18, 0x03	; 3
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_print>
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <velocity>:

void velocity(unsigned char left_motor, unsigned char right_motor) {
    OCR5AL = (unsigned char)left_motor;
 510:	80 93 28 01 	sts	0x0128, r24
    OCR5BL = (unsigned char)right_motor;
 514:	60 93 2a 01 	sts	0x012A, r22
}
 518:	08 95       	ret

0000051a <motion_set>:

void motion_set(unsigned char Direction) {
    unsigned char PortARestore = 0;

    Direction &= 0x0F;  
    PortARestore = PORTA;  
 51a:	92 b1       	in	r25, 0x02	; 2
    PortARestore &= 0xF0;  
 51c:	90 7f       	andi	r25, 0xF0	; 240
}

void motion_set(unsigned char Direction) {
    unsigned char PortARestore = 0;

    Direction &= 0x0F;  
 51e:	8f 70       	andi	r24, 0x0F	; 15
    PortARestore = PORTA;  
    PortARestore &= 0xF0;  
    PortARestore |= Direction; 
 520:	98 2b       	or	r25, r24
    PORTA = PortARestore; 
 522:	92 b9       	out	0x02, r25	; 2
}
 524:	08 95       	ret

00000526 <forward>:

void forward(void) {
    motion_set(0x06);
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	0e 94 8d 02 	call	0x51a	; 0x51a <motion_set>
	velocity(130,130);
 52c:	82 e8       	ldi	r24, 0x82	; 130
 52e:	62 e8       	ldi	r22, 0x82	; 130
 530:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
}
 534:	08 95       	ret

00000536 <left>:

void left(void) {
	motion_set(0x06);
 536:	86 e0       	ldi	r24, 0x06	; 6
 538:	0e 94 8d 02 	call	0x51a	; 0x51a <motion_set>
	velocity(10,200);
 53c:	8a e0       	ldi	r24, 0x0A	; 10
 53e:	68 ec       	ldi	r22, 0xC8	; 200
 540:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
}
 544:	08 95       	ret

00000546 <right>:
void right(void) {
	motion_set(0x06);
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	0e 94 8d 02 	call	0x51a	; 0x51a <motion_set>
	velocity(200,10);
 54c:	88 ec       	ldi	r24, 0xC8	; 200
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
}
 554:	08 95       	ret

00000556 <stop>:

void stop(void) {
    motion_set(0x00);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 8d 02 	call	0x51a	; 0x51a <motion_set>
}
 55c:	08 95       	ret

0000055e <buzzer_on>:

void buzzer_on(void) {
    unsigned char port_restore = 0;
    port_restore = PINC;
 55e:	86 b1       	in	r24, 0x06	; 6
    port_restore = port_restore | 0x08;
 560:	88 60       	ori	r24, 0x08	; 8
    PORTC = port_restore;
 562:	88 b9       	out	0x08, r24	; 8
}
 564:	08 95       	ret

00000566 <buzzer_off>:

void buzzer_off(void) {
    unsigned char port_restore = 0;
    port_restore = PINC;
 566:	86 b1       	in	r24, 0x06	; 6
    port_restore = port_restore & 0xF7;
 568:	87 7f       	andi	r24, 0xF7	; 247
    PORTC = port_restore;
 56a:	88 b9       	out	0x08, r24	; 8
}
 56c:	08 95       	ret

0000056e <init_devices>:

void init_devices(void) {
    cli(); 
 56e:	f8 94       	cli
    port_init();
 570:	0e 94 2a 02 	call	0x454	; 0x454 <port_init>
    adc_init();
 574:	0e 94 4c 02 	call	0x498	; 0x498 <adc_init>
    timer5_init();
 578:	0e 94 31 02 	call	0x462	; 0x462 <timer5_init>
    sei();  
 57c:	78 94       	sei
}
 57e:	08 95       	ret

00000580 <main>:

int main() {
    init_devices();
 580:	0e 94 b7 02 	call	0x56e	; 0x56e <init_devices>
    lcd_set_4bit();
 584:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_set_4bit>
    lcd_init();
 588:	0e 94 11 01 	call	0x222	; 0x222 <lcd_init>
	    
    while (1) {
        Left_white_line = ADC_Conversion(3);    
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 592:	80 93 08 02 	sts	0x0208, r24
        Center_white_line = ADC_Conversion(2);  
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 59c:	80 93 07 02 	sts	0x0207, r24
        Right_white_line = ADC_Conversion(1); 
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 5a6:	80 93 06 02 	sts	0x0206, r24
		IR1 = ADC_Conversion(4);  
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 5b0:	80 93 05 02 	sts	0x0205, r24
		IR5 = ADC_Conversion(8);
 5b4:	88 e0       	ldi	r24, 0x08	; 8
 5b6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ADC_Conversion>
 5ba:	80 93 04 02 	sts	0x0204, r24
        flag = 0;
 5be:	10 92 09 02 	sts	0x0209, r1
		
        if (((Center_white_line > 0x28) && (Left_white_line > 0x28)) || 
 5c2:	80 91 07 02 	lds	r24, 0x0207
 5c6:	89 32       	cpi	r24, 0x29	; 41
 5c8:	48 f0       	brcs	.+18     	; 0x5dc <main+0x5c>
 5ca:	80 91 08 02 	lds	r24, 0x0208
 5ce:	89 32       	cpi	r24, 0x29	; 41
 5d0:	58 f4       	brcc	.+22     	; 0x5e8 <main+0x68>
 5d2:	80 91 06 02 	lds	r24, 0x0206
 5d6:	89 32       	cpi	r24, 0x29	; 41
 5d8:	38 f4       	brcc	.+14     	; 0x5e8 <main+0x68>
 5da:	e3 c3       	rjmp	.+1990   	; 0xda2 <main+0x822>
            ((Center_white_line > 0x28) && (Right_white_line > 0x28)) || 
 5dc:	80 91 08 02 	lds	r24, 0x0208
 5e0:	89 32       	cpi	r24, 0x29	; 41
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <main+0x66>
 5e4:	ef c3       	rjmp	.+2014   	; 0xdc4 <main+0x844>
 5e6:	ea c3       	rjmp	.+2004   	; 0xdbc <main+0x83c>
            ((Left_white_line > 0x28) && (Center_white_line > 0x28) && (Right_white_line > 0x28))) 
        {
            node = node + 1;
 5e8:	40 91 03 02 	lds	r20, 0x0203
 5ec:	4f 5f       	subi	r20, 0xFF	; 255
 5ee:	40 93 03 02 	sts	0x0203, r20
            lcd_print(2, 1, node, 3);
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	23 e0       	ldi	r18, 0x03	; 3
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_print>

            switch (node) {
 600:	80 91 03 02 	lds	r24, 0x0203
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	84 31       	cpi	r24, 0x14	; 20
 60a:	91 05       	cpc	r25, r1
 60c:	08 f0       	brcs	.+2      	; 0x610 <main+0x90>
 60e:	c5 c3       	rjmp	.+1930   	; 0xd9a <main+0x81a>
 610:	8e 58       	subi	r24, 0x8E	; 142
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	fc 01       	movw	r30, r24
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	05 90       	lpm	r0, Z+
 61c:	f4 91       	lpm	r31, Z
 61e:	e0 2d       	mov	r30, r0
 620:	19 94       	eijmp
                case 1:
                    forward();
 622:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	9f e7       	ldi	r25, 0x7F	; 127
 62a:	a3 e4       	ldi	r26, 0x43	; 67
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	a0 40       	sbci	r26, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <main+0xac>
 634:	00 c0       	rjmp	.+0      	; 0x636 <main+0xb6>
 636:	00 00       	nop
 638:	b0 c3       	rjmp	.+1888   	; 0xd9a <main+0x81a>
                    _delay_ms(1500);
                    break;

                case 2:
                    forward();
 63a:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	9f e7       	ldi	r25, 0x7F	; 127
 642:	a6 e1       	ldi	r26, 0x16	; 22
 644:	81 50       	subi	r24, 0x01	; 1
 646:	90 40       	sbci	r25, 0x00	; 0
 648:	a0 40       	sbci	r26, 0x00	; 0
 64a:	e1 f7       	brne	.-8      	; 0x644 <main+0xc4>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <main+0xce>
 64e:	00 00       	nop
 650:	a4 c3       	rjmp	.+1864   	; 0xd9a <main+0x81a>
                    _delay_ms(500);
                    break;

                case 3:
                    forward();
 652:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	a8 e0       	ldi	r26, 0x08	; 8
 65c:	81 50       	subi	r24, 0x01	; 1
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	a0 40       	sbci	r26, 0x00	; 0
 662:	e1 f7       	brne	.-8      	; 0x65c <main+0xdc>
 664:	00 c0       	rjmp	.+0      	; 0x666 <main+0xe6>
 666:	00 00       	nop
                    _delay_ms(200);
                    stop();
 668:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	9f e7       	ldi	r25, 0x7F	; 127
 670:	a6 e1       	ldi	r26, 0x16	; 22
 672:	81 50       	subi	r24, 0x01	; 1
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	a0 40       	sbci	r26, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0xf2>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0xfc>
 67c:	00 00       	nop
                    _delay_ms(500);
                    if(IR1<50)
 67e:	80 91 05 02 	lds	r24, 0x0205
 682:	82 33       	cpi	r24, 0x32	; 50
 684:	08 f0       	brcs	.+2      	; 0x688 <main+0x108>
 686:	89 c3       	rjmp	.+1810   	; 0xd9a <main+0x81a>
                    {
	                    buzzer_on();
 688:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	9f ef       	ldi	r25, 0xFF	; 255
 690:	ac e2       	ldi	r26, 0x2C	; 44
 692:	81 50       	subi	r24, 0x01	; 1
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	a0 40       	sbci	r26, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <main+0x112>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <main+0x11c>
 69c:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 69e:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	ac e2       	ldi	r26, 0x2C	; 44
 6a8:	81 50       	subi	r24, 0x01	; 1
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	a0 40       	sbci	r26, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <main+0x128>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x132>
 6b2:	00 00       	nop
	                    _delay_ms(1000);
	                    RC_buzzer_count++;
 6b4:	80 91 00 02 	lds	r24, 0x0200
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 00 02 	sts	0x0200, r24
 6be:	6d c3       	rjmp	.+1754   	; 0xd9a <main+0x81a>
                    }
                    break;

                case 4:
                    forward();
 6c0:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	9f ef       	ldi	r25, 0xFF	; 255
 6c8:	a8 e0       	ldi	r26, 0x08	; 8
 6ca:	81 50       	subi	r24, 0x01	; 1
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	a0 40       	sbci	r26, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0x14a>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x154>
 6d4:	00 00       	nop
                    _delay_ms(200);
					stop();
 6d6:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	9f e7       	ldi	r25, 0x7F	; 127
 6de:	a6 e1       	ldi	r26, 0x16	; 22
 6e0:	81 50       	subi	r24, 0x01	; 1
 6e2:	90 40       	sbci	r25, 0x00	; 0
 6e4:	a0 40       	sbci	r26, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0x160>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x16a>
 6ea:	00 00       	nop
					_delay_ms(500);
					if(IR1<50)
 6ec:	80 91 05 02 	lds	r24, 0x0205
 6f0:	82 33       	cpi	r24, 0x32	; 50
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <main+0x176>
 6f4:	52 c3       	rjmp	.+1700   	; 0xd9a <main+0x81a>
					{
						buzzer_on();
 6f6:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	9f ef       	ldi	r25, 0xFF	; 255
 6fe:	ac e2       	ldi	r26, 0x2C	; 44
 700:	81 50       	subi	r24, 0x01	; 1
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	a0 40       	sbci	r26, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <main+0x180>
 708:	00 c0       	rjmp	.+0      	; 0x70a <main+0x18a>
 70a:	00 00       	nop
						_delay_ms(1000);
						buzzer_off();
 70c:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	9f ef       	ldi	r25, 0xFF	; 255
 714:	ac e2       	ldi	r26, 0x2C	; 44
 716:	81 50       	subi	r24, 0x01	; 1
 718:	90 40       	sbci	r25, 0x00	; 0
 71a:	a0 40       	sbci	r26, 0x00	; 0
 71c:	e1 f7       	brne	.-8      	; 0x716 <main+0x196>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <main+0x1a0>
 720:	00 00       	nop
						_delay_ms(1000);
						RC_buzzer_count++;
 722:	80 91 00 02 	lds	r24, 0x0200
 726:	8f 5f       	subi	r24, 0xFF	; 255
 728:	80 93 00 02 	sts	0x0200, r24
 72c:	36 c3       	rjmp	.+1644   	; 0xd9a <main+0x81a>
					}
					break;

                case 5:
                    stop();
 72e:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	9f e7       	ldi	r25, 0x7F	; 127
 736:	a6 e1       	ldi	r26, 0x16	; 22
 738:	81 50       	subi	r24, 0x01	; 1
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	a0 40       	sbci	r26, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x1b8>
 740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x1c2>
 742:	00 00       	nop
					_delay_ms(500);
                    left();
 744:	0e 94 9b 02 	call	0x536	; 0x536 <left>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f ef       	ldi	r25, 0xFF	; 255
 74c:	a7 e4       	ldi	r26, 0x47	; 71
 74e:	81 50       	subi	r24, 0x01	; 1
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	a0 40       	sbci	r26, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <main+0x1ce>
 756:	00 c0       	rjmp	.+0      	; 0x758 <main+0x1d8>
 758:	00 00       	nop
 75a:	1f c3       	rjmp	.+1598   	; 0xd9a <main+0x81a>
                    _delay_ms(1600);
                    break;

                case 6:
				    forward();
 75c:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 760:	8c ec       	ldi	r24, 0xCC	; 204
 762:	9c e4       	ldi	r25, 0x4C	; 76
 764:	a6 e0       	ldi	r26, 0x06	; 6
 766:	81 50       	subi	r24, 0x01	; 1
 768:	90 40       	sbci	r25, 0x00	; 0
 76a:	a0 40       	sbci	r26, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <main+0x1e6>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x1f0>
				    _delay_ms(140);
                    stop();
 770:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	9f e7       	ldi	r25, 0x7F	; 127
 778:	a6 e1       	ldi	r26, 0x16	; 22
 77a:	81 50       	subi	r24, 0x01	; 1
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	a0 40       	sbci	r26, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <main+0x1fa>
 782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x204>
 784:	00 00       	nop
                    _delay_ms(500);
                    left();
 786:	0e 94 9b 02 	call	0x536	; 0x536 <left>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	9f eb       	ldi	r25, 0xBF	; 191
 78e:	a5 e4       	ldi	r26, 0x45	; 69
 790:	81 50       	subi	r24, 0x01	; 1
 792:	90 40       	sbci	r25, 0x00	; 0
 794:	a0 40       	sbci	r26, 0x00	; 0
 796:	e1 f7       	brne	.-8      	; 0x790 <main+0x210>
 798:	00 c0       	rjmp	.+0      	; 0x79a <main+0x21a>
 79a:	00 00       	nop
 79c:	fe c2       	rjmp	.+1532   	; 0xd9a <main+0x81a>
                    _delay_ms(1550);
                    break;

                case 7:
                  forward();
 79e:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 7a2:	86 e6       	ldi	r24, 0x66	; 102
 7a4:	96 ee       	ldi	r25, 0xE6	; 230
 7a6:	a9 e0       	ldi	r26, 0x09	; 9
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	a0 40       	sbci	r26, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x228>
                  _delay_ms(220);
                  stop();
 7b0:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	9f eb       	ldi	r25, 0xBF	; 191
 7b8:	af e0       	ldi	r26, 0x0F	; 15
 7ba:	81 50       	subi	r24, 0x01	; 1
 7bc:	90 40       	sbci	r25, 0x00	; 0
 7be:	a0 40       	sbci	r26, 0x00	; 0
 7c0:	e1 f7       	brne	.-8      	; 0x7ba <main+0x23a>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <main+0x244>
 7c4:	00 00       	nop
                  _delay_ms(350);
                  if(IR1<50 && IR5<50 )
 7c6:	80 91 05 02 	lds	r24, 0x0205
 7ca:	82 33       	cpi	r24, 0x32	; 50
 7cc:	30 f5       	brcc	.+76     	; 0x81a <main+0x29a>
 7ce:	80 91 04 02 	lds	r24, 0x0204
 7d2:	82 33       	cpi	r24, 0x32	; 50
 7d4:	38 f5       	brcc	.+78     	; 0x824 <main+0x2a4>
                  {
	                  for(i=1;i=2;i++)
 7d6:	c2 e0       	ldi	r28, 0x02	; 2
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
 7da:	d0 93 10 02 	sts	0x0210, r29
 7de:	c0 93 0f 02 	sts	0x020F, r28
	                  {
		                  buzzer_on();
 7e2:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	ac e2       	ldi	r26, 0x2C	; 44
 7ec:	81 50       	subi	r24, 0x01	; 1
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	a0 40       	sbci	r26, 0x00	; 0
 7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0x26c>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0x276>
 7f6:	00 00       	nop
		                  _delay_ms(1000);
		                  buzzer_off();
 7f8:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	ac e2       	ldi	r26, 0x2C	; 44
 802:	81 50       	subi	r24, 0x01	; 1
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	a0 40       	sbci	r26, 0x00	; 0
 808:	e1 f7       	brne	.-8      	; 0x802 <main+0x282>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <main+0x28c>
 80c:	00 00       	nop
		                  _delay_ms(1000);
		                  HU_buzzer_count=HU_buzzer_count+2;
 80e:	80 91 01 02 	lds	r24, 0x0201
 812:	8e 5f       	subi	r24, 0xFE	; 254
 814:	80 93 01 02 	sts	0x0201, r24
 818:	e0 cf       	rjmp	.-64     	; 0x7da <main+0x25a>
	                  }
	                  break;
                  }
                  
                  if(IR1<50 || IR5<50 )
 81a:	80 91 04 02 	lds	r24, 0x0204
 81e:	82 33       	cpi	r24, 0x32	; 50
 820:	08 f0       	brcs	.+2      	; 0x824 <main+0x2a4>
 822:	bb c2       	rjmp	.+1398   	; 0xd9a <main+0x81a>
                  {
	                  buzzer_on();
 824:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	ac e2       	ldi	r26, 0x2C	; 44
 82e:	81 50       	subi	r24, 0x01	; 1
 830:	90 40       	sbci	r25, 0x00	; 0
 832:	a0 40       	sbci	r26, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <main+0x2ae>
 836:	00 c0       	rjmp	.+0      	; 0x838 <main+0x2b8>
 838:	00 00       	nop
	                  _delay_ms(1000);
	                  buzzer_off();
 83a:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	9f ef       	ldi	r25, 0xFF	; 255
 842:	ac e2       	ldi	r26, 0x2C	; 44
 844:	81 50       	subi	r24, 0x01	; 1
 846:	90 40       	sbci	r25, 0x00	; 0
 848:	a0 40       	sbci	r26, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <main+0x2c4>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <main+0x2ce>
 84e:	00 00       	nop
	                  _delay_ms(1000);
	                  HU_buzzer_count++;
 850:	80 91 01 02 	lds	r24, 0x0201
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 01 02 	sts	0x0201, r24
	                  break;
 85a:	9f c2       	rjmp	.+1342   	; 0xd9a <main+0x81a>
                  }
                  break;

                case 8:
					forward();
 85c:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 860:	86 e6       	ldi	r24, 0x66	; 102
 862:	96 ee       	ldi	r25, 0xE6	; 230
 864:	a9 e0       	ldi	r26, 0x09	; 9
 866:	81 50       	subi	r24, 0x01	; 1
 868:	90 40       	sbci	r25, 0x00	; 0
 86a:	a0 40       	sbci	r26, 0x00	; 0
 86c:	e1 f7       	brne	.-8      	; 0x866 <main+0x2e6>
					_delay_ms(220);
					stop();
 86e:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9f eb       	ldi	r25, 0xBF	; 191
 876:	af e0       	ldi	r26, 0x0F	; 15
 878:	81 50       	subi	r24, 0x01	; 1
 87a:	90 40       	sbci	r25, 0x00	; 0
 87c:	a0 40       	sbci	r26, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <main+0x2f8>
 880:	00 c0       	rjmp	.+0      	; 0x882 <main+0x302>
 882:	00 00       	nop
					_delay_ms(350);
					if(IR1<50 && IR5<50 )
 884:	80 91 05 02 	lds	r24, 0x0205
 888:	82 33       	cpi	r24, 0x32	; 50
 88a:	30 f5       	brcc	.+76     	; 0x8d8 <main+0x358>
 88c:	80 91 04 02 	lds	r24, 0x0204
 890:	82 33       	cpi	r24, 0x32	; 50
 892:	38 f5       	brcc	.+78     	; 0x8e2 <main+0x362>
					{
						for(i=1;i=2;i++)
 894:	c2 e0       	ldi	r28, 0x02	; 2
 896:	d0 e0       	ldi	r29, 0x00	; 0
 898:	d0 93 10 02 	sts	0x0210, r29
 89c:	c0 93 0f 02 	sts	0x020F, r28
						{
							buzzer_on();
 8a0:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	ac e2       	ldi	r26, 0x2C	; 44
 8aa:	81 50       	subi	r24, 0x01	; 1
 8ac:	90 40       	sbci	r25, 0x00	; 0
 8ae:	a0 40       	sbci	r26, 0x00	; 0
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <main+0x32a>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <main+0x334>
 8b4:	00 00       	nop
							_delay_ms(1000);
							buzzer_off();
 8b6:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	9f ef       	ldi	r25, 0xFF	; 255
 8be:	ac e2       	ldi	r26, 0x2C	; 44
 8c0:	81 50       	subi	r24, 0x01	; 1
 8c2:	90 40       	sbci	r25, 0x00	; 0
 8c4:	a0 40       	sbci	r26, 0x00	; 0
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <main+0x340>
 8c8:	00 c0       	rjmp	.+0      	; 0x8ca <main+0x34a>
 8ca:	00 00       	nop
							_delay_ms(1000);
							RC_buzzer_count=RC_buzzer_count+2;
 8cc:	80 91 00 02 	lds	r24, 0x0200
 8d0:	8e 5f       	subi	r24, 0xFE	; 254
 8d2:	80 93 00 02 	sts	0x0200, r24
 8d6:	e0 cf       	rjmp	.-64     	; 0x898 <main+0x318>
						}
						break;
					}
					
					if(IR1<50 || IR5<50 )
 8d8:	80 91 04 02 	lds	r24, 0x0204
 8dc:	82 33       	cpi	r24, 0x32	; 50
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <main+0x362>
 8e0:	5c c2       	rjmp	.+1208   	; 0xd9a <main+0x81a>
					{
						buzzer_on();
 8e2:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	9f ef       	ldi	r25, 0xFF	; 255
 8ea:	ac e2       	ldi	r26, 0x2C	; 44
 8ec:	81 50       	subi	r24, 0x01	; 1
 8ee:	90 40       	sbci	r25, 0x00	; 0
 8f0:	a0 40       	sbci	r26, 0x00	; 0
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x36c>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <main+0x376>
 8f6:	00 00       	nop
						_delay_ms(1000);
						buzzer_off();
 8f8:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	9f ef       	ldi	r25, 0xFF	; 255
 900:	ac e2       	ldi	r26, 0x2C	; 44
 902:	81 50       	subi	r24, 0x01	; 1
 904:	90 40       	sbci	r25, 0x00	; 0
 906:	a0 40       	sbci	r26, 0x00	; 0
 908:	e1 f7       	brne	.-8      	; 0x902 <main+0x382>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0x38c>
 90c:	00 00       	nop
						_delay_ms(1000);
						RC_buzzer_count++;
 90e:	80 91 00 02 	lds	r24, 0x0200
 912:	8f 5f       	subi	r24, 0xFF	; 255
 914:	80 93 00 02 	sts	0x0200, r24
 918:	40 c2       	rjmp	.+1152   	; 0xd9a <main+0x81a>
					}
					break;

                case 9:
                   forward();
 91a:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 91e:	86 e6       	ldi	r24, 0x66	; 102
 920:	96 ee       	ldi	r25, 0xE6	; 230
 922:	a9 e0       	ldi	r26, 0x09	; 9
 924:	81 50       	subi	r24, 0x01	; 1
 926:	90 40       	sbci	r25, 0x00	; 0
 928:	a0 40       	sbci	r26, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <main+0x3a4>
                   _delay_ms(220);
                   stop();
 92c:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	9f eb       	ldi	r25, 0xBF	; 191
 934:	af e0       	ldi	r26, 0x0F	; 15
 936:	81 50       	subi	r24, 0x01	; 1
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	a0 40       	sbci	r26, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <main+0x3b6>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <main+0x3c0>
 940:	00 00       	nop
                   _delay_ms(350);
                   if(IR1<50 && IR5<50 )
 942:	80 91 05 02 	lds	r24, 0x0205
 946:	82 33       	cpi	r24, 0x32	; 50
 948:	30 f5       	brcc	.+76     	; 0x996 <main+0x416>
 94a:	80 91 04 02 	lds	r24, 0x0204
 94e:	82 33       	cpi	r24, 0x32	; 50
 950:	38 f5       	brcc	.+78     	; 0x9a0 <main+0x420>
                   {
	                   for(i=1;i=2;i++)
 952:	c2 e0       	ldi	r28, 0x02	; 2
 954:	d0 e0       	ldi	r29, 0x00	; 0
 956:	d0 93 10 02 	sts	0x0210, r29
 95a:	c0 93 0f 02 	sts	0x020F, r28
	                   {
		                   buzzer_on();
 95e:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	9f ef       	ldi	r25, 0xFF	; 255
 966:	ac e2       	ldi	r26, 0x2C	; 44
 968:	81 50       	subi	r24, 0x01	; 1
 96a:	90 40       	sbci	r25, 0x00	; 0
 96c:	a0 40       	sbci	r26, 0x00	; 0
 96e:	e1 f7       	brne	.-8      	; 0x968 <main+0x3e8>
 970:	00 c0       	rjmp	.+0      	; 0x972 <main+0x3f2>
 972:	00 00       	nop
		                   _delay_ms(1000);
		                   buzzer_off();
 974:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	ac e2       	ldi	r26, 0x2C	; 44
 97e:	81 50       	subi	r24, 0x01	; 1
 980:	90 40       	sbci	r25, 0x00	; 0
 982:	a0 40       	sbci	r26, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <main+0x3fe>
 986:	00 c0       	rjmp	.+0      	; 0x988 <main+0x408>
 988:	00 00       	nop
		                   _delay_ms(1000);
		                   CF_buzzer_count=CF_buzzer_count+2;
 98a:	80 91 02 02 	lds	r24, 0x0202
 98e:	8e 5f       	subi	r24, 0xFE	; 254
 990:	80 93 02 02 	sts	0x0202, r24
 994:	e0 cf       	rjmp	.-64     	; 0x956 <main+0x3d6>
	                   }
	                   break;
                   }
                   
                   if(IR1<50 || IR5<50 )
 996:	80 91 04 02 	lds	r24, 0x0204
 99a:	82 33       	cpi	r24, 0x32	; 50
 99c:	08 f0       	brcs	.+2      	; 0x9a0 <main+0x420>
 99e:	fd c1       	rjmp	.+1018   	; 0xd9a <main+0x81a>
                   {
	                   buzzer_on();
 9a0:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	ac e2       	ldi	r26, 0x2C	; 44
 9aa:	81 50       	subi	r24, 0x01	; 1
 9ac:	90 40       	sbci	r25, 0x00	; 0
 9ae:	a0 40       	sbci	r26, 0x00	; 0
 9b0:	e1 f7       	brne	.-8      	; 0x9aa <main+0x42a>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <main+0x434>
 9b4:	00 00       	nop
	                   _delay_ms(1000);
	                   buzzer_off();
 9b6:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	9f ef       	ldi	r25, 0xFF	; 255
 9be:	ac e2       	ldi	r26, 0x2C	; 44
 9c0:	81 50       	subi	r24, 0x01	; 1
 9c2:	90 40       	sbci	r25, 0x00	; 0
 9c4:	a0 40       	sbci	r26, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x440>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x44a>
 9ca:	00 00       	nop
	                   _delay_ms(1000);
	                   CF_buzzer_count++;
 9cc:	80 91 02 02 	lds	r24, 0x0202
 9d0:	8f 5f       	subi	r24, 0xFF	; 255
 9d2:	80 93 02 02 	sts	0x0202, r24
 9d6:	e1 c1       	rjmp	.+962    	; 0xd9a <main+0x81a>
                   }
                   break;
				   
                case 10:
				    forward();
 9d8:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	9f eb       	ldi	r25, 0xBF	; 191
 9e0:	a6 e0       	ldi	r26, 0x06	; 6
 9e2:	81 50       	subi	r24, 0x01	; 1
 9e4:	90 40       	sbci	r25, 0x00	; 0
 9e6:	a0 40       	sbci	r26, 0x00	; 0
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <main+0x462>
 9ea:	00 c0       	rjmp	.+0      	; 0x9ec <main+0x46c>
 9ec:	00 00       	nop
				    _delay_ms(150);
                    stop();
 9ee:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	9f e7       	ldi	r25, 0x7F	; 127
 9f6:	a6 e1       	ldi	r26, 0x16	; 22
 9f8:	81 50       	subi	r24, 0x01	; 1
 9fa:	90 40       	sbci	r25, 0x00	; 0
 9fc:	a0 40       	sbci	r26, 0x00	; 0
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <main+0x478>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <main+0x482>
 a02:	00 00       	nop
                    _delay_ms(500);
                    right();
 a04:	0e 94 a3 02 	call	0x546	; 0x546 <right>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	a7 e4       	ldi	r26, 0x47	; 71
 a0e:	81 50       	subi	r24, 0x01	; 1
 a10:	90 40       	sbci	r25, 0x00	; 0
 a12:	a0 40       	sbci	r26, 0x00	; 0
 a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x48e>
 a16:	00 c0       	rjmp	.+0      	; 0xa18 <main+0x498>
 a18:	00 00       	nop
 a1a:	bf c1       	rjmp	.+894    	; 0xd9a <main+0x81a>
                    _delay_ms(1600);
                    break;

                case 11:
				    forward();
 a1c:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	9f eb       	ldi	r25, 0xBF	; 191
 a24:	a6 e0       	ldi	r26, 0x06	; 6
 a26:	81 50       	subi	r24, 0x01	; 1
 a28:	90 40       	sbci	r25, 0x00	; 0
 a2a:	a0 40       	sbci	r26, 0x00	; 0
 a2c:	e1 f7       	brne	.-8      	; 0xa26 <main+0x4a6>
 a2e:	00 c0       	rjmp	.+0      	; 0xa30 <main+0x4b0>
 a30:	00 00       	nop
				    _delay_ms(150);
				    stop();
 a32:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	9f e7       	ldi	r25, 0x7F	; 127
 a3a:	a6 e1       	ldi	r26, 0x16	; 22
 a3c:	81 50       	subi	r24, 0x01	; 1
 a3e:	90 40       	sbci	r25, 0x00	; 0
 a40:	a0 40       	sbci	r26, 0x00	; 0
 a42:	e1 f7       	brne	.-8      	; 0xa3c <main+0x4bc>
 a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0x4c6>
 a46:	00 00       	nop
				    _delay_ms(500);
				    right();
 a48:	0e 94 a3 02 	call	0x546	; 0x546 <right>
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	9f ef       	ldi	r25, 0xFF	; 255
 a50:	a7 e4       	ldi	r26, 0x47	; 71
 a52:	81 50       	subi	r24, 0x01	; 1
 a54:	90 40       	sbci	r25, 0x00	; 0
 a56:	a0 40       	sbci	r26, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <main+0x4d2>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <main+0x4dc>
 a5c:	00 00       	nop
 a5e:	9d c1       	rjmp	.+826    	; 0xd9a <main+0x81a>
				    _delay_ms(1600);
				    break;

                case 12:
                    forward();
 a60:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	a8 e0       	ldi	r26, 0x08	; 8
 a6a:	81 50       	subi	r24, 0x01	; 1
 a6c:	90 40       	sbci	r25, 0x00	; 0
 a6e:	a0 40       	sbci	r26, 0x00	; 0
 a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0x4ea>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <main+0x4f4>
 a74:	00 00       	nop
                    _delay_ms(200);
                    stop();
 a76:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	9f e7       	ldi	r25, 0x7F	; 127
 a7e:	a6 e1       	ldi	r26, 0x16	; 22
 a80:	81 50       	subi	r24, 0x01	; 1
 a82:	90 40       	sbci	r25, 0x00	; 0
 a84:	a0 40       	sbci	r26, 0x00	; 0
 a86:	e1 f7       	brne	.-8      	; 0xa80 <main+0x500>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <main+0x50a>
 a8a:	00 00       	nop
                    _delay_ms(500);
                    if(IR5<50)
 a8c:	80 91 04 02 	lds	r24, 0x0204
 a90:	82 33       	cpi	r24, 0x32	; 50
 a92:	08 f0       	brcs	.+2      	; 0xa96 <main+0x516>
 a94:	82 c1       	rjmp	.+772    	; 0xd9a <main+0x81a>
                    {
	                    buzzer_on();
 a96:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 a9a:	8f ef       	ldi	r24, 0xFF	; 255
 a9c:	9f ef       	ldi	r25, 0xFF	; 255
 a9e:	ac e2       	ldi	r26, 0x2C	; 44
 aa0:	81 50       	subi	r24, 0x01	; 1
 aa2:	90 40       	sbci	r25, 0x00	; 0
 aa4:	a0 40       	sbci	r26, 0x00	; 0
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <main+0x520>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <main+0x52a>
 aaa:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 aac:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	9f ef       	ldi	r25, 0xFF	; 255
 ab4:	ac e2       	ldi	r26, 0x2C	; 44
 ab6:	81 50       	subi	r24, 0x01	; 1
 ab8:	90 40       	sbci	r25, 0x00	; 0
 aba:	a0 40       	sbci	r26, 0x00	; 0
 abc:	e1 f7       	brne	.-8      	; 0xab6 <main+0x536>
 abe:	00 c0       	rjmp	.+0      	; 0xac0 <main+0x540>
 ac0:	00 00       	nop
	                    _delay_ms(1000);
	                    CF_buzzer_count++;
 ac2:	80 91 02 02 	lds	r24, 0x0202
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
 ac8:	80 93 02 02 	sts	0x0202, r24
 acc:	66 c1       	rjmp	.+716    	; 0xd9a <main+0x81a>
                    }
                    break;

                case 13:
                    forward();
 ace:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	a8 e0       	ldi	r26, 0x08	; 8
 ad8:	81 50       	subi	r24, 0x01	; 1
 ada:	90 40       	sbci	r25, 0x00	; 0
 adc:	a0 40       	sbci	r26, 0x00	; 0
 ade:	e1 f7       	brne	.-8      	; 0xad8 <main+0x558>
 ae0:	00 c0       	rjmp	.+0      	; 0xae2 <main+0x562>
 ae2:	00 00       	nop
                    _delay_ms(200);
                    stop();
 ae4:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 ae8:	8f ef       	ldi	r24, 0xFF	; 255
 aea:	9f e7       	ldi	r25, 0x7F	; 127
 aec:	a6 e1       	ldi	r26, 0x16	; 22
 aee:	81 50       	subi	r24, 0x01	; 1
 af0:	90 40       	sbci	r25, 0x00	; 0
 af2:	a0 40       	sbci	r26, 0x00	; 0
 af4:	e1 f7       	brne	.-8      	; 0xaee <main+0x56e>
 af6:	00 c0       	rjmp	.+0      	; 0xaf8 <main+0x578>
 af8:	00 00       	nop
                    _delay_ms(500);
                    if(IR5<50)
 afa:	80 91 04 02 	lds	r24, 0x0204
 afe:	82 33       	cpi	r24, 0x32	; 50
 b00:	08 f0       	brcs	.+2      	; 0xb04 <main+0x584>
 b02:	4b c1       	rjmp	.+662    	; 0xd9a <main+0x81a>
                    {
	                    buzzer_on();
 b04:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	9f ef       	ldi	r25, 0xFF	; 255
 b0c:	ac e2       	ldi	r26, 0x2C	; 44
 b0e:	81 50       	subi	r24, 0x01	; 1
 b10:	90 40       	sbci	r25, 0x00	; 0
 b12:	a0 40       	sbci	r26, 0x00	; 0
 b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x58e>
 b16:	00 c0       	rjmp	.+0      	; 0xb18 <main+0x598>
 b18:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 b1a:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	9f ef       	ldi	r25, 0xFF	; 255
 b22:	ac e2       	ldi	r26, 0x2C	; 44
 b24:	81 50       	subi	r24, 0x01	; 1
 b26:	90 40       	sbci	r25, 0x00	; 0
 b28:	a0 40       	sbci	r26, 0x00	; 0
 b2a:	e1 f7       	brne	.-8      	; 0xb24 <main+0x5a4>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <main+0x5ae>
 b2e:	00 00       	nop
	                    _delay_ms(1000);
	                    HU_buzzer_count++;
 b30:	80 91 01 02 	lds	r24, 0x0201
 b34:	8f 5f       	subi	r24, 0xFF	; 255
 b36:	80 93 01 02 	sts	0x0201, r24
 b3a:	2f c1       	rjmp	.+606    	; 0xd9a <main+0x81a>
                    }
                    break;

                case 14:
                    stop();
 b3c:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 b40:	8f ef       	ldi	r24, 0xFF	; 255
 b42:	9f e7       	ldi	r25, 0x7F	; 127
 b44:	a6 e1       	ldi	r26, 0x16	; 22
 b46:	81 50       	subi	r24, 0x01	; 1
 b48:	90 40       	sbci	r25, 0x00	; 0
 b4a:	a0 40       	sbci	r26, 0x00	; 0
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0x5c6>
 b4e:	00 c0       	rjmp	.+0      	; 0xb50 <main+0x5d0>
 b50:	00 00       	nop
                    _delay_ms(500);
                    left();
 b52:	0e 94 9b 02 	call	0x536	; 0x536 <left>
 b56:	8f ef       	ldi	r24, 0xFF	; 255
 b58:	9f ef       	ldi	r25, 0xFF	; 255
 b5a:	a7 e4       	ldi	r26, 0x47	; 71
 b5c:	81 50       	subi	r24, 0x01	; 1
 b5e:	90 40       	sbci	r25, 0x00	; 0
 b60:	a0 40       	sbci	r26, 0x00	; 0
 b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0x5dc>
 b64:	00 c0       	rjmp	.+0      	; 0xb66 <main+0x5e6>
 b66:	00 00       	nop
 b68:	18 c1       	rjmp	.+560    	; 0xd9a <main+0x81a>
                    _delay_ms(1600);
                    break;

                case 15:
                    stop();
 b6a:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 b6e:	8f ef       	ldi	r24, 0xFF	; 255
 b70:	9f e7       	ldi	r25, 0x7F	; 127
 b72:	a6 e1       	ldi	r26, 0x16	; 22
 b74:	81 50       	subi	r24, 0x01	; 1
 b76:	90 40       	sbci	r25, 0x00	; 0
 b78:	a0 40       	sbci	r26, 0x00	; 0
 b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x5f4>
 b7c:	00 c0       	rjmp	.+0      	; 0xb7e <main+0x5fe>
 b7e:	00 00       	nop
                    _delay_ms(500);
                    left();
 b80:	0e 94 9b 02 	call	0x536	; 0x536 <left>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	9f ef       	ldi	r25, 0xFF	; 255
 b88:	a7 e4       	ldi	r26, 0x47	; 71
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	90 40       	sbci	r25, 0x00	; 0
 b8e:	a0 40       	sbci	r26, 0x00	; 0
 b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x60a>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x614>
 b94:	00 00       	nop
 b96:	01 c1       	rjmp	.+514    	; 0xd9a <main+0x81a>
                    _delay_ms(1600);
                    break;

                case 16:
                   forward();
 b98:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 b9c:	8f ef       	ldi	r24, 0xFF	; 255
 b9e:	9f ef       	ldi	r25, 0xFF	; 255
 ba0:	a8 e0       	ldi	r26, 0x08	; 8
 ba2:	81 50       	subi	r24, 0x01	; 1
 ba4:	90 40       	sbci	r25, 0x00	; 0
 ba6:	a0 40       	sbci	r26, 0x00	; 0
 ba8:	e1 f7       	brne	.-8      	; 0xba2 <main+0x622>
 baa:	00 c0       	rjmp	.+0      	; 0xbac <main+0x62c>
 bac:	00 00       	nop
                   _delay_ms(200);
                   stop();
 bae:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	9f e7       	ldi	r25, 0x7F	; 127
 bb6:	a6 e1       	ldi	r26, 0x16	; 22
 bb8:	81 50       	subi	r24, 0x01	; 1
 bba:	90 40       	sbci	r25, 0x00	; 0
 bbc:	a0 40       	sbci	r26, 0x00	; 0
 bbe:	e1 f7       	brne	.-8      	; 0xbb8 <main+0x638>
 bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <main+0x642>
 bc2:	00 00       	nop
                   _delay_ms(500);
                   for (unsigned char i = 0; i < CF_buzzer_count; i++)
 bc4:	80 91 02 02 	lds	r24, 0x0202
 bc8:	88 23       	and	r24, r24
 bca:	09 f4       	brne	.+2      	; 0xbce <main+0x64e>
 bcc:	e6 c0       	rjmp	.+460    	; 0xd9a <main+0x81a>
 bce:	c0 e0       	ldi	r28, 0x00	; 0
                   {
	                   buzzer_on();
 bd0:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	ac e2       	ldi	r26, 0x2C	; 44
 bda:	81 50       	subi	r24, 0x01	; 1
 bdc:	90 40       	sbci	r25, 0x00	; 0
 bde:	a0 40       	sbci	r26, 0x00	; 0
 be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x65a>
 be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x664>
 be4:	00 00       	nop
	                   _delay_ms(1000);
	                   buzzer_off();
 be6:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 bea:	8f ef       	ldi	r24, 0xFF	; 255
 bec:	9f ef       	ldi	r25, 0xFF	; 255
 bee:	ac e2       	ldi	r26, 0x2C	; 44
 bf0:	81 50       	subi	r24, 0x01	; 1
 bf2:	90 40       	sbci	r25, 0x00	; 0
 bf4:	a0 40       	sbci	r26, 0x00	; 0
 bf6:	e1 f7       	brne	.-8      	; 0xbf0 <main+0x670>
 bf8:	00 c0       	rjmp	.+0      	; 0xbfa <main+0x67a>
 bfa:	00 00       	nop
                case 16:
                   forward();
                   _delay_ms(200);
                   stop();
                   _delay_ms(500);
                   for (unsigned char i = 0; i < CF_buzzer_count; i++)
 bfc:	cf 5f       	subi	r28, 0xFF	; 255
 bfe:	80 91 02 02 	lds	r24, 0x0202
 c02:	c8 17       	cp	r28, r24
 c04:	28 f3       	brcs	.-54     	; 0xbd0 <main+0x650>
 c06:	c9 c0       	rjmp	.+402    	; 0xd9a <main+0x81a>
	                   _delay_ms(1000);
                   }
                   break;

                case 17:
                    forward();
 c08:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 c0c:	8f ef       	ldi	r24, 0xFF	; 255
 c0e:	9f ef       	ldi	r25, 0xFF	; 255
 c10:	a8 e0       	ldi	r26, 0x08	; 8
 c12:	81 50       	subi	r24, 0x01	; 1
 c14:	90 40       	sbci	r25, 0x00	; 0
 c16:	a0 40       	sbci	r26, 0x00	; 0
 c18:	e1 f7       	brne	.-8      	; 0xc12 <main+0x692>
 c1a:	00 c0       	rjmp	.+0      	; 0xc1c <main+0x69c>
 c1c:	00 00       	nop
                    _delay_ms(200);
                    stop();
 c1e:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 c22:	8f ef       	ldi	r24, 0xFF	; 255
 c24:	9f e7       	ldi	r25, 0x7F	; 127
 c26:	a6 e1       	ldi	r26, 0x16	; 22
 c28:	81 50       	subi	r24, 0x01	; 1
 c2a:	90 40       	sbci	r25, 0x00	; 0
 c2c:	a0 40       	sbci	r26, 0x00	; 0
 c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x6a8>
 c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x6b2>
 c32:	00 00       	nop
                    _delay_ms(500);
                    for (unsigned char i = 0; i < HU_buzzer_count; i++) {
 c34:	80 91 01 02 	lds	r24, 0x0201
 c38:	88 23       	and	r24, r24
 c3a:	09 f4       	brne	.+2      	; 0xc3e <main+0x6be>
 c3c:	ae c0       	rjmp	.+348    	; 0xd9a <main+0x81a>
 c3e:	c0 e0       	ldi	r28, 0x00	; 0
	                    buzzer_on();
 c40:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	9f ef       	ldi	r25, 0xFF	; 255
 c48:	ac e2       	ldi	r26, 0x2C	; 44
 c4a:	81 50       	subi	r24, 0x01	; 1
 c4c:	90 40       	sbci	r25, 0x00	; 0
 c4e:	a0 40       	sbci	r26, 0x00	; 0
 c50:	e1 f7       	brne	.-8      	; 0xc4a <main+0x6ca>
 c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x6d4>
 c54:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 c56:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	9f ef       	ldi	r25, 0xFF	; 255
 c5e:	ac e2       	ldi	r26, 0x2C	; 44
 c60:	81 50       	subi	r24, 0x01	; 1
 c62:	90 40       	sbci	r25, 0x00	; 0
 c64:	a0 40       	sbci	r26, 0x00	; 0
 c66:	e1 f7       	brne	.-8      	; 0xc60 <main+0x6e0>
 c68:	00 c0       	rjmp	.+0      	; 0xc6a <main+0x6ea>
 c6a:	00 00       	nop
                case 17:
                    forward();
                    _delay_ms(200);
                    stop();
                    _delay_ms(500);
                    for (unsigned char i = 0; i < HU_buzzer_count; i++) {
 c6c:	cf 5f       	subi	r28, 0xFF	; 255
 c6e:	80 91 01 02 	lds	r24, 0x0201
 c72:	c8 17       	cp	r28, r24
 c74:	28 f3       	brcs	.-54     	; 0xc40 <main+0x6c0>
	                    buzzer_on();
	                    _delay_ms(1000);
	                    buzzer_off();
	                    _delay_ms(1000);
                    }
                    for (unsigned char i = 0; i < HU_buzzer_count; i++) {
 c76:	88 23       	and	r24, r24
 c78:	09 f4       	brne	.+2      	; 0xc7c <main+0x6fc>
 c7a:	8f c0       	rjmp	.+286    	; 0xd9a <main+0x81a>
 c7c:	c0 e0       	ldi	r28, 0x00	; 0
	                    buzzer_on();
 c7e:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	ac e2       	ldi	r26, 0x2C	; 44
 c88:	81 50       	subi	r24, 0x01	; 1
 c8a:	90 40       	sbci	r25, 0x00	; 0
 c8c:	a0 40       	sbci	r26, 0x00	; 0
 c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x708>
 c90:	00 c0       	rjmp	.+0      	; 0xc92 <main+0x712>
 c92:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 c94:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 c98:	8f ef       	ldi	r24, 0xFF	; 255
 c9a:	9f ef       	ldi	r25, 0xFF	; 255
 c9c:	ac e2       	ldi	r26, 0x2C	; 44
 c9e:	81 50       	subi	r24, 0x01	; 1
 ca0:	90 40       	sbci	r25, 0x00	; 0
 ca2:	a0 40       	sbci	r26, 0x00	; 0
 ca4:	e1 f7       	brne	.-8      	; 0xc9e <main+0x71e>
 ca6:	00 c0       	rjmp	.+0      	; 0xca8 <main+0x728>
 ca8:	00 00       	nop
	                    buzzer_on();
	                    _delay_ms(1000);
	                    buzzer_off();
	                    _delay_ms(1000);
                    }
                    for (unsigned char i = 0; i < HU_buzzer_count; i++) {
 caa:	cf 5f       	subi	r28, 0xFF	; 255
 cac:	80 91 01 02 	lds	r24, 0x0201
 cb0:	c8 17       	cp	r28, r24
 cb2:	28 f3       	brcs	.-54     	; 0xc7e <main+0x6fe>
 cb4:	72 c0       	rjmp	.+228    	; 0xd9a <main+0x81a>
	                    _delay_ms(1000);
                    }
                    break;

                case 18:
                    forward();
 cb6:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 cba:	8f ef       	ldi	r24, 0xFF	; 255
 cbc:	9f ef       	ldi	r25, 0xFF	; 255
 cbe:	a8 e0       	ldi	r26, 0x08	; 8
 cc0:	81 50       	subi	r24, 0x01	; 1
 cc2:	90 40       	sbci	r25, 0x00	; 0
 cc4:	a0 40       	sbci	r26, 0x00	; 0
 cc6:	e1 f7       	brne	.-8      	; 0xcc0 <main+0x740>
 cc8:	00 c0       	rjmp	.+0      	; 0xcca <main+0x74a>
 cca:	00 00       	nop
                    _delay_ms(200);
                    stop();
 ccc:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f e7       	ldi	r25, 0x7F	; 127
 cd4:	a6 e1       	ldi	r26, 0x16	; 22
 cd6:	81 50       	subi	r24, 0x01	; 1
 cd8:	90 40       	sbci	r25, 0x00	; 0
 cda:	a0 40       	sbci	r26, 0x00	; 0
 cdc:	e1 f7       	brne	.-8      	; 0xcd6 <main+0x756>
 cde:	00 c0       	rjmp	.+0      	; 0xce0 <main+0x760>
 ce0:	00 00       	nop
                    _delay_ms(500);
                    forward();
 ce2:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 ce6:	8f ef       	ldi	r24, 0xFF	; 255
 ce8:	9f ef       	ldi	r25, 0xFF	; 255
 cea:	a8 e0       	ldi	r26, 0x08	; 8
 cec:	81 50       	subi	r24, 0x01	; 1
 cee:	90 40       	sbci	r25, 0x00	; 0
 cf0:	a0 40       	sbci	r26, 0x00	; 0
 cf2:	e1 f7       	brne	.-8      	; 0xcec <main+0x76c>
 cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x776>
 cf6:	00 00       	nop
                    _delay_ms(200);
                    stop();
 cf8:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 cfc:	8f ef       	ldi	r24, 0xFF	; 255
 cfe:	9f e7       	ldi	r25, 0x7F	; 127
 d00:	a6 e1       	ldi	r26, 0x16	; 22
 d02:	81 50       	subi	r24, 0x01	; 1
 d04:	90 40       	sbci	r25, 0x00	; 0
 d06:	a0 40       	sbci	r26, 0x00	; 0
 d08:	e1 f7       	brne	.-8      	; 0xd02 <main+0x782>
 d0a:	00 c0       	rjmp	.+0      	; 0xd0c <main+0x78c>
 d0c:	00 00       	nop
                    _delay_ms(500);
                    for (unsigned char i = 0; i < RC_buzzer_count; i++)
 d0e:	80 91 00 02 	lds	r24, 0x0200
 d12:	88 23       	and	r24, r24
 d14:	09 f4       	brne	.+2      	; 0xd18 <main+0x798>
 d16:	41 c0       	rjmp	.+130    	; 0xd9a <main+0x81a>
 d18:	c0 e0       	ldi	r28, 0x00	; 0
                    {
	                    buzzer_on();
 d1a:	0e 94 af 02 	call	0x55e	; 0x55e <buzzer_on>
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	ac e2       	ldi	r26, 0x2C	; 44
 d24:	81 50       	subi	r24, 0x01	; 1
 d26:	90 40       	sbci	r25, 0x00	; 0
 d28:	a0 40       	sbci	r26, 0x00	; 0
 d2a:	e1 f7       	brne	.-8      	; 0xd24 <main+0x7a4>
 d2c:	00 c0       	rjmp	.+0      	; 0xd2e <main+0x7ae>
 d2e:	00 00       	nop
	                    _delay_ms(1000);
	                    buzzer_off();
 d30:	0e 94 b3 02 	call	0x566	; 0x566 <buzzer_off>
 d34:	8f ef       	ldi	r24, 0xFF	; 255
 d36:	9f ef       	ldi	r25, 0xFF	; 255
 d38:	ac e2       	ldi	r26, 0x2C	; 44
 d3a:	81 50       	subi	r24, 0x01	; 1
 d3c:	90 40       	sbci	r25, 0x00	; 0
 d3e:	a0 40       	sbci	r26, 0x00	; 0
 d40:	e1 f7       	brne	.-8      	; 0xd3a <main+0x7ba>
 d42:	00 c0       	rjmp	.+0      	; 0xd44 <main+0x7c4>
 d44:	00 00       	nop
                    _delay_ms(500);
                    forward();
                    _delay_ms(200);
                    stop();
                    _delay_ms(500);
                    for (unsigned char i = 0; i < RC_buzzer_count; i++)
 d46:	cf 5f       	subi	r28, 0xFF	; 255
 d48:	80 91 00 02 	lds	r24, 0x0200
 d4c:	c8 17       	cp	r28, r24
 d4e:	28 f3       	brcs	.-54     	; 0xd1a <main+0x79a>
 d50:	24 c0       	rjmp	.+72     	; 0xd9a <main+0x81a>
	                    _delay_ms(1000);
                    }
                    break;

                case 19:
                    forward();
 d52:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 d56:	8f ef       	ldi	r24, 0xFF	; 255
 d58:	9f e7       	ldi	r25, 0x7F	; 127
 d5a:	a6 e1       	ldi	r26, 0x16	; 22
 d5c:	81 50       	subi	r24, 0x01	; 1
 d5e:	90 40       	sbci	r25, 0x00	; 0
 d60:	a0 40       	sbci	r26, 0x00	; 0
 d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0x7dc>
 d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0x7e6>
 d66:	00 00       	nop
 d68:	18 c0       	rjmp	.+48     	; 0xd9a <main+0x81a>
                    _delay_ms(500);
                    break;

                case 20:
                    forward();
 d6a:	0e 94 93 02 	call	0x526	; 0x526 <forward>
 d6e:	8f ef       	ldi	r24, 0xFF	; 255
 d70:	9f e7       	ldi	r25, 0x7F	; 127
 d72:	a6 e1       	ldi	r26, 0x16	; 22
 d74:	81 50       	subi	r24, 0x01	; 1
 d76:	90 40       	sbci	r25, 0x00	; 0
 d78:	a0 40       	sbci	r26, 0x00	; 0
 d7a:	e1 f7       	brne	.-8      	; 0xd74 <main+0x7f4>
 d7c:	00 c0       	rjmp	.+0      	; 0xd7e <main+0x7fe>
 d7e:	00 00       	nop
                    _delay_ms(500);
					stop();
 d80:	0e 94 ab 02 	call	0x556	; 0x556 <stop>
 d84:	8f ef       	ldi	r24, 0xFF	; 255
 d86:	9f ef       	ldi	r25, 0xFF	; 255
 d88:	a2 e5       	ldi	r26, 0x52	; 82
 d8a:	b7 e0       	ldi	r27, 0x07	; 7
 d8c:	81 50       	subi	r24, 0x01	; 1
 d8e:	90 40       	sbci	r25, 0x00	; 0
 d90:	a0 40       	sbci	r26, 0x00	; 0
 d92:	b0 40       	sbci	r27, 0x00	; 0
 d94:	d9 f7       	brne	.-10     	; 0xd8c <main+0x80c>
 d96:	00 c0       	rjmp	.+0      	; 0xd98 <main+0x818>
 d98:	00 00       	nop
					_delay_ms(50000);
                    break;
            }
        }

        if ((Center_white_line > 0x28) && (flag==0)) {
 d9a:	80 91 07 02 	lds	r24, 0x0207
 d9e:	89 32       	cpi	r24, 0x29	; 41
 da0:	68 f0       	brcs	.+26     	; 0xdbc <main+0x83c>
 da2:	80 91 09 02 	lds	r24, 0x0209
 da6:	88 23       	and	r24, r24
 da8:	49 f4       	brne	.+18     	; 0xdbc <main+0x83c>
            flag = 1;
 daa:	81 e0       	ldi	r24, 0x01	; 1
 dac:	80 93 09 02 	sts	0x0209, r24
            forward();
 db0:	0e 94 93 02 	call	0x526	; 0x526 <forward>
            velocity(140, 140);
 db4:	8c e8       	ldi	r24, 0x8C	; 140
 db6:	6c e8       	ldi	r22, 0x8C	; 140
 db8:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
        }

        if ((Left_white_line > 0x28) && (flag == 0)) {
 dbc:	80 91 08 02 	lds	r24, 0x0208
 dc0:	89 32       	cpi	r24, 0x29	; 41
 dc2:	68 f0       	brcs	.+26     	; 0xdde <main+0x85e>
 dc4:	80 91 09 02 	lds	r24, 0x0209
 dc8:	88 23       	and	r24, r24
 dca:	49 f4       	brne	.+18     	; 0xdde <main+0x85e>
            flag = 1;
 dcc:	81 e0       	ldi	r24, 0x01	; 1
 dce:	80 93 09 02 	sts	0x0209, r24
            forward();
 dd2:	0e 94 93 02 	call	0x526	; 0x526 <forward>
            velocity(55, 100);
 dd6:	87 e3       	ldi	r24, 0x37	; 55
 dd8:	64 e6       	ldi	r22, 0x64	; 100
 dda:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
        }

        if ((Right_white_line > 0x28) && (flag == 0)) {
 dde:	80 91 06 02 	lds	r24, 0x0206
 de2:	89 32       	cpi	r24, 0x29	; 41
 de4:	08 f4       	brcc	.+2      	; 0xde8 <main+0x868>
 de6:	d2 cb       	rjmp	.-2140   	; 0x58c <main+0xc>
 de8:	80 91 09 02 	lds	r24, 0x0209
 dec:	88 23       	and	r24, r24
 dee:	09 f0       	breq	.+2      	; 0xdf2 <main+0x872>
 df0:	cd cb       	rjmp	.-2150   	; 0x58c <main+0xc>
            flag = 1;
 df2:	81 e0       	ldi	r24, 0x01	; 1
 df4:	80 93 09 02 	sts	0x0209, r24
            forward();
 df8:	0e 94 93 02 	call	0x526	; 0x526 <forward>
            velocity(100, 55);
 dfc:	84 e6       	ldi	r24, 0x64	; 100
 dfe:	67 e3       	ldi	r22, 0x37	; 55
 e00:	0e 94 88 02 	call	0x510	; 0x510 <velocity>
 e04:	c3 cb       	rjmp	.-2170   	; 0x58c <main+0xc>

00000e06 <__udivmodhi4>:
 e06:	aa 1b       	sub	r26, r26
 e08:	bb 1b       	sub	r27, r27
 e0a:	51 e1       	ldi	r21, 0x11	; 17
 e0c:	07 c0       	rjmp	.+14     	; 0xe1c <__udivmodhi4_ep>

00000e0e <__udivmodhi4_loop>:
 e0e:	aa 1f       	adc	r26, r26
 e10:	bb 1f       	adc	r27, r27
 e12:	a6 17       	cp	r26, r22
 e14:	b7 07       	cpc	r27, r23
 e16:	10 f0       	brcs	.+4      	; 0xe1c <__udivmodhi4_ep>
 e18:	a6 1b       	sub	r26, r22
 e1a:	b7 0b       	sbc	r27, r23

00000e1c <__udivmodhi4_ep>:
 e1c:	88 1f       	adc	r24, r24
 e1e:	99 1f       	adc	r25, r25
 e20:	5a 95       	dec	r21
 e22:	a9 f7       	brne	.-22     	; 0xe0e <__udivmodhi4_loop>
 e24:	80 95       	com	r24
 e26:	90 95       	com	r25
 e28:	bc 01       	movw	r22, r24
 e2a:	cd 01       	movw	r24, r26
 e2c:	08 95       	ret

00000e2e <_exit>:
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
